# -*- coding: utf-8 -*-
"""
Created on Thu Oct  26 20:20:47 2023

@author: Anshuman Das
"""

import numpy as np
import cv2
import matplotlib.pyplot as plt

cap = cv2.VideoCapture('roadvideo2Trim.mp4')

while(cap.isOpened()):
    #frame by frame of video
    ret, image = cap.read()
       
    #creating empty image of same size
    height, width, no_use = image.shape
    empty_img = np.zeros((height, width), np.uint8)

    
    
    #APPLIED K-MEANS CLUSTERING
    Z = image.reshape((-1,3))
    # convert to np.float32
    Z = np.float32(Z)
    # define criteria, number of clusters(K) and apply kmeans()
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
    K = 6
    ret,label,center=cv2.kmeans(Z,K,None,criteria,15,cv2.KMEANS_RANDOM_CENTERS)
    # Now convert back into uint8, and make original image
    center = np.uint8(center)
    res = center[label.flatten()]
    res2 = res.reshape((image.shape))
    
    
    
    #CONVERTED TO A LUV IMAGE AND MADE EMPTY IMAGE, A MASK
    blur = cv2.GaussianBlur(res2,(15,15),0)
    gray = cv2.cvtColor(blur,cv2.COLOR_RGB2GRAY)
    LUV = cv2.cvtColor(blur,cv2.COLOR_RGB2LUV)
    l = LUV[:,:,0]
    v1 = l>80
    v2 = l<150
    value_final = v1 & v2 
    empty_img[value_final] = 255
    empty_img[LUV[:,:100,:]] = 0
    
    
    #APPLIED BITWISE-AND ON GRAYSCALE IMAGE AND EMPTY IMAGE TO OBTAIN ROAD AND SOME-OTHER IMAGES TOO
    final = cv2.bitwise_and(gray,empty_img)
    final, contours, hierchary = cv2.findContours(final, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    final = cv2.drawContours(final, contours, -1, 0, 3)
    
    #APPLIED BITWISE-AND ON ORIGINAL IMAGE TO CREATE OUTPUT OF IMAGE THROUGH SUPERIMPOSING GRAYSCALE AND OTHER IMAGES TOO
    final = cv2.bitwise_and(empty_img,original_img)
    final, contour, hiearchy = cv2.ImposeContours
